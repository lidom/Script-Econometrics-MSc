test_data_new <- myDataGenerator(n    = 10,
beta = beta_true,
X    = X_cond)
## Store the X data as 'X_cond'
X_cond        <- as.matrix(test_data[,-1])
## Generate new Y data conditionally on X_cond
test_data_new <- myDataGenerator(n    = 10,
beta = beta_true,
X    = X_cond)
## compare
round(head(test_data,     3), 2) # New Y, new X
round(head(test_data_new, 3), 2) # New Y, conditionally on X
set.seed(123)
n           <- 10           # small sample size
beta_true_2 <- beta_true[2] # true beta_2
## A function to generate realizations of the estimator \hat{beta}_2
## conditionally or unconditionally on X:
hatbeta2_sim_fun <- function(conditional, X = X_cond){
if(conditional == TRUE){
data     <- myDataGenerator(n = n, beta = beta_true, X = X)
lm_obj   <- lm(Y ~ X_1 + X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
if(conditional == FALSE){
data     <- myDataGenerator(n = n, beta = beta_true)
lm_obj   <- lm(Y ~ X_1 + X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
}
## Number of Monte Carlo replications
B <- 5000
hatbeta2_sim_fun(conditional = TRUE,  X = X_cond)
hatbeta2_sim_fun <- function(conditional, X = X_cond){
if(conditional == TRUE){
data     <- myDataGenerator(n = n, beta = beta_true, X = X)
lm_obj   <- lm(Y ~ X_1 + X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
if(conditional == FALSE){
data     <- myDataGenerator(n = n, beta = beta_true)
lm_obj   <- lm(Y ~ X_1 + X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
return(hatbeta2)
}
## Draw realizations of \hat{beta}_2
## 1. Generate \hat{beta}_2 realizations conditionally on X
hatbeta2_sim_cond   <- replicate(B, hatbeta2_sim_fun(conditional = TRUE,  X = X_cond))
## 2. Generate \hat{beta}_2 realizations unconditionally on X
hatbeta2_sim_uncond <- replicate(B, hatbeta2_sim_fun(conditional = FALSE))
## empirical density of beta_hat_2 estimates
library("scales")
# true variance
var_true_beta_2 <- sigma^2 * diag(solve(t(X_cond) %*% X_cond))[2]
# standard deviation of the error term
sigma <- 3
# true variance
var_true_beta_2 <- sigma^2 * diag(solve(t(X_cond) %*% X_cond))[2]
curve(expr = dnorm(x, mean = beta_true_2,
sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(beta_hat_2), ylim=c(0,1.1))
curve(expr = dnorm(x, mean = beta_true_2,
sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_cond), ylim=c(0,1.1))
hatbeta2_sim_cond
hatbeta2_sim_fun(conditional = TRUE,  X = X_cond)
X = X_cond
data     <- myDataGenerator(n = n, beta = beta_true, X = X)
data
myDataGenerator(n = n, beta = beta_true, X = X)
myDataGenerator <- function(n, beta, X=NULL){
if(is.null(X)){
X   <- cbind(rep(1, n),
runif(n, 2, 10),
runif(n,12, 22))
}
eps  <- rnorm(n, sd=3)
Y    <- X %*% beta + eps
data <- data.frame("Y"=Y,
"X_1"=X[,1], "X_2"=X[,2], "X_3"=X[,3])
##
return(data)
}
set.seed(123)
n           <- 10           # small sample size
beta_true_2 <- beta_true[2] # true beta_2
hatbeta2_sim_fun <- function(conditional, X = X_cond){
if(conditional == TRUE){
data     <- myDataGenerator(n = n, beta = beta_true, X = X)
lm_obj   <- lm(Y ~ X_1 + X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
if(conditional == FALSE){
data     <- myDataGenerator(n = n, beta = beta_true)
lm_obj   <- lm(Y ~ X_1 + X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
return(hatbeta2)
}
hatbeta2_sim_fun
myDataGenerator(n = n, beta = beta_true, X = X)
myDataGenerator(n = 10, beta=beta_true)
myDataGenerator(n = n, beta = beta_true, X = X)
lm_obj   <- lm(Y ~ X_1 + X_2 + X_3, data = data)
coef(lm_obj)[2]
lm_obj
lm_obj   <- lm(Y ~ X_2 + X_3, data = data)
coef(lm_obj)[2]
## conditionally or unconditionally on X:
hatbeta2_sim_fun <- function(conditional, X = X_cond){
if(conditional == TRUE){
data     <- myDataGenerator(n = n, beta = beta_true, X = X)
lm_obj   <- lm(Y ~ X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
if(conditional == FALSE){
data     <- myDataGenerator(n = n, beta = beta_true)
lm_obj   <- lm(Y ~ X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
return(hatbeta2)
}
## Draw realizations of \hat{beta}_2
## 1. Generate \hat{beta}_2 realizations conditionally on X
hatbeta2_sim_cond   <- replicate(B, hatbeta2_sim_fun(conditional = TRUE,  X = X_cond))
## Draw realizations of \hat{beta}_2
## 1. Generate \hat{beta}_2 realizations conditionally on X
hatbeta2_sim_cond   <- replicate(B, hatbeta2_sim_fun(conditional = TRUE,  X = X_cond))
## 2. Generate \hat{beta}_2 realizations unconditionally on X
hatbeta2_sim_uncond <- replicate(B, hatbeta2_sim_fun(conditional = FALSE))
## True normal distribution of beta_hat_2 versus
## empirical density of beta_hat_2 estimates
library("scales")
# standard deviation of the error term
sigma <- 3
# true variance
var_true_beta_2 <- sigma^2 * diag(solve(t(X_cond) %*% X_cond))[2]
curve(expr = dnorm(x, mean = beta_true_2,
sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_cond), ylim=c(0,1.1))
hist(hatbeta2_sim_cond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_cond, bw = bw.SJ(hatbeta2_sim_cond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X),
expression(
"Nonparametric Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X)))
par(mfrow=c(1,2))
curve(expr = dnorm(x, mean = beta_true_2,
sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_cond), ylim=c(0,1.1))
hist(hatbeta2_sim_cond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_cond, bw = bw.SJ(hatbeta2_sim_cond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X),
expression(
"Nonparametric Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X)))
####
curve(expr = dnorm(x, mean = beta_true_2, sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_uncond), ylim=c(0,1.5))
hist(hatbeta2_sim_uncond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_uncond, bw=bw.SJ(hatbeta2_sim_uncond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]),
expression("Nonparam. Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2])))
par(mfrow=c(1,2))
curve(expr = dnorm(x, mean = beta_true_2,
sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_uncond), ylim=c(0,1.5))
hist(hatbeta2_sim_cond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_cond, bw = bw.SJ(hatbeta2_sim_cond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X),
expression(
"Nonparametric Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X)))
####
curve(expr = dnorm(x, mean = beta_true_2, sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_uncond), ylim=c(0,1.5))
hist(hatbeta2_sim_uncond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_uncond, bw=bw.SJ(hatbeta2_sim_uncond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]),
expression("Nonparam. Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2])))
par(mfrow=c(1,2))
curve(expr = dnorm(x, mean = beta_true_2,
sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_uncond), ylim=c(0,1.5))
#hist(hatbeta2_sim_cond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_cond, bw = bw.SJ(hatbeta2_sim_cond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X),
expression(
"Nonparametric Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X)))
####
curve(expr = dnorm(x, mean = beta_true_2, sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_uncond), ylim=c(0,1.5))
#hist(hatbeta2_sim_uncond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_uncond, bw=bw.SJ(hatbeta2_sim_uncond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]),
expression("Nonparam. Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2])))
set.seed(123)
n           <- 8           # small sample size
beta_true_2 <- beta_true[2] # true beta_2
## A function to generate realizations of the estimator \hat{beta}_2
## conditionally or unconditionally on X:
hatbeta2_sim_fun <- function(conditional, X = X_cond){
if(conditional == TRUE){
data     <- myDataGenerator(n = n, beta = beta_true, X = X)
lm_obj   <- lm(Y ~ X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
if(conditional == FALSE){
data     <- myDataGenerator(n = n, beta = beta_true)
lm_obj   <- lm(Y ~ X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
return(hatbeta2)
}
## Number of Monte Carlo replications
B <- 5000
## Draw realizations of \hat{beta}_2
## 1. Generate \hat{beta}_2 realizations conditionally on X
hatbeta2_sim_cond   <- replicate(B, hatbeta2_sim_fun(conditional = TRUE,  X = X_cond))
## 2. Generate \hat{beta}_2 realizations unconditionally on X
hatbeta2_sim_uncond <- replicate(B, hatbeta2_sim_fun(conditional = FALSE))
## True normal distribution of beta_hat_2 versus
## empirical density of beta_hat_2 estimates
library("scales")
# standard deviation of the error term
sigma <- 3
# true variance
var_true_beta_2 <- sigma^2 * diag(solve(t(X_cond) %*% X_cond))[2]
par(mfrow=c(1,2))
curve(expr = dnorm(x, mean = beta_true_2,
sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_uncond), ylim=c(0,1.5))
#hist(hatbeta2_sim_cond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_cond, bw = bw.SJ(hatbeta2_sim_cond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X),
expression(
"Nonparametric Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X)))
####
curve(expr = dnorm(x, mean = beta_true_2, sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_uncond), ylim=c(0,1.5))
#hist(hatbeta2_sim_uncond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_uncond, bw=bw.SJ(hatbeta2_sim_uncond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]),
expression("Nonparam. Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2])))
set.seed(123)
n           <- 8           # small sample size
beta_true_2 <- beta_true[2] # true beta_2
## A function to generate realizations of the estimator \hat{beta}_2
## conditionally or unconditionally on X:
hatbeta2_sim_fun <- function(conditional, X = X_cond){
if(conditional == TRUE){
data     <- myDataGenerator(n = n, beta = beta_true, X = X)
lm_obj   <- lm(Y ~ X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
if(conditional == FALSE){
data     <- myDataGenerator(n = n, beta = beta_true)
lm_obj   <- lm(Y ~ X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
return(hatbeta2)
}
## Number of Monte Carlo replications
B <- 5000
## Small sample size
n           <- 8
myDataGenerator <- function(n, beta, X=NULL){
if(is.null(X)){
X   <- cbind(rep(1, n),
runif(n, 2, 10),
runif(n,12, 22))
}
eps  <- rnorm(n, sd=3)
Y    <- X %*% beta + eps
data <- data.frame("Y"=Y,
"X_1"=X[,1], "X_2"=X[,2], "X_3"=X[,3])
##
return(data)
}
## Small sample size
n           <- 8
## Define a true beta vector
beta_true <- c(2,3,4)
## Generate Y and X data
test_data     <- myDataGenerator(n = n, beta=beta_true)
## Store the X data as 'X_cond'
X_cond        <- as.matrix(test_data[,-1]) # as matrix allows matrix multiplications
## Generate new Y data conditionally on X_cond
test_data_new <- myDataGenerator(n    = n,
beta = beta_true,
X    = X_cond)
## compare
round(head(test_data,     3), 2) # New Y, new X
round(head(test_data_new, 3), 2) # New Y, conditionally on X
set.seed(123)
beta_true_2 <- beta_true[2] # true beta_2
## A function to generate realizations of the estimator \hat{beta}_2
## conditionally or unconditionally on X:
hatbeta2_sim_fun <- function(conditional, X = X_cond){
if(conditional == TRUE){
data     <- myDataGenerator(n = n, beta = beta_true, X = X)
lm_obj   <- lm(Y ~ X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
if(conditional == FALSE){
data     <- myDataGenerator(n = n, beta = beta_true)
lm_obj   <- lm(Y ~ X_2 + X_3, data = data)
hatbeta2 <- coef(lm_obj)[2]
}
return(hatbeta2)
}
## Number of Monte Carlo replications
B <- 5000
## Draw realizations of \hat{beta}_2
## 1. Generate \hat{beta}_2 realizations conditionally on X
hatbeta2_sim_cond   <- replicate(B, hatbeta2_sim_fun(conditional = TRUE,  X = X_cond))
## 2. Generate \hat{beta}_2 realizations unconditionally on X
hatbeta2_sim_uncond <- replicate(B, hatbeta2_sim_fun(conditional = FALSE))
library("scales")
# standard deviation of the error term
sigma <- 3
# true variance
var_true_beta_2 <- sigma^2 * diag(solve(t(X_cond) %*% X_cond))[2]
par(mfrow=c(1,2))
curve(expr = dnorm(x, mean = beta_true_2,
sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_uncond), ylim=c(0,1.5))
#hist(hatbeta2_sim_cond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_cond, bw = bw.SJ(hatbeta2_sim_cond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X),
expression(
"Nonparametric Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X)))
####
curve(expr = dnorm(x, mean = beta_true_2, sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=range(hatbeta2_sim_uncond), ylim=c(0,1.5))
#hist(hatbeta2_sim_uncond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_uncond, bw=bw.SJ(hatbeta2_sim_uncond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]),
expression("Nonparam. Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2])))
par(mfrow=c(1,2))
curve(expr = dnorm(x, mean = beta_true_2,
sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=c(1,5), ylim=c(0,1.5))
#hist(hatbeta2_sim_cond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_cond, bw = bw.SJ(hatbeta2_sim_cond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X),
expression(
"Nonparametric Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X)))
####
curve(expr = dnorm(x, mean = beta_true_2, sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=c(1,5), ylim=c(0,1.5))
#hist(hatbeta2_sim_uncond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_uncond, bw=bw.SJ(hatbeta2_sim_uncond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]),
expression("Nonparam. Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2])))
par(mfrow=c(2,1))
curve(expr = dnorm(x, mean = beta_true_2,
sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=c(1,5), ylim=c(0,1.5))
#hist(hatbeta2_sim_cond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_cond, bw = bw.SJ(hatbeta2_sim_cond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X),
expression(
"Nonparametric Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2]~'|'~X)))
####
curve(expr = dnorm(x, mean = beta_true_2, sd=sqrt(var_true_beta_2)),
xlab="",ylab="", col=gray(.2), lwd=3, lty=1,
xlim=c(1,5), ylim=c(0,1.5))
#hist(hatbeta2_sim_uncond, freq=FALSE, col=alpha("blue",.35), add=TRUE)
lines(density(hatbeta2_sim_uncond, bw=bw.SJ(hatbeta2_sim_uncond)),
col=alpha("blue",.5), lwd=3)
legend("topleft", lty=c(1,NA,1), lwd=c(3,NA,3), pch=c(NA,15,NA), pt.cex=c(NA,2,NA),
col=c(gray(.2), alpha("blue",.45), alpha("blue",.5)), bty="n", legend=
c(expression(
"Theoretical Gaussian Density of"~hat(beta)[2]~'|'~X),
expression(
"Histogram based on the 5000 MC realizations of"~
hat(beta)[2]),
expression("Nonparam. Density Estimation based on the 5000 MC realizations of"~
hat(beta)[2])))
library(AER)
suppressPackageStartupMessages(library(AER))
data("DoctorVisits")
lm_obj <- lm(visits ~ gender + age + income + health, data = DoctorVisits)
summary(lm_obj)
lm_obj <- lm(visits ~ gender + age + income, data = DoctorVisits)
summary(lm_obj)
