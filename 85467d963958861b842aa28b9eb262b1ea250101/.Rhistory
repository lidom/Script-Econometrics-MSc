myDataGenerator <- function(n, beta, X=NULL, sigma=3){
if(is.null(X)){
X   <- cbind(rep(1, n),
runif(n, 2, 10),
runif(n,12, 22))
}
eps  <- rnorm(n, sd=sigma)
Y    <- X %*% beta + eps
data <- data.frame("Y"=Y,
"X_1"=X[,1], "X_2"=X[,2], "X_3"=X[,3])
##
return(data)
}
## Let's generate a data set from our data generating process
mydata  <- myDataGenerator(n = n, beta=beta_true)
X_cond  <- cbind(mydata$X_1, mydata$X_2, mydata$X_3)
myDataGenerator <- function(n, beta, X=NULL, sigma=3){
if(is.null(X)){
X   <- cbind(rep(1, n),
runif(n, 2, 10),
runif(n,12, 22))
}
eps  <- rnorm(n, sd=sigma)
Y    <- X %*% beta + eps
data <- data.frame("Y"=Y,
"X_1"=X[,1], "X_2"=X[,2], "X_3"=X[,3])
##
return(data)
}
## Define a true beta vector
beta_true <- c(2,3,4)
## Check:
## Generate Y and X data
test_data     <- myDataGenerator(n = 10, beta=beta_true)
## Generate new Y data conditionally on X
X_cond <- cbind(test_data$X_1,
test_data$X_2,
test_data$X_3)
test_data_new <- myDataGenerator(n    = 10,
beta = beta_true,
X    = X_cond)
## compare
round(head(test_data,     3), 2) # New Y, new X
round(head(test_data_new, 3), 2) # New Y, conditionally on X
## ---- fig.align="center", echo=TRUE, fig.width = 8, fig.height = 5, out.width = "1\\textwidth"----
set.seed(123)
n           <- 10       # a small sample size
beta_true   <- c(2,3,4) # true data vector
sigma       <- 3        # true var of the error term
## Let's generate a data set from our data generating process
mydata  <- myDataGenerator(n = n, beta=beta_true)
X_cond  <- cbind(mydata$X_1, mydata$X_2, mydata$X_3)
set.seed(123)
signif_level <-  0.05
rep          <- 5000 # MC replications
confint_m    <- matrix(NA, nrow=2, ncol=rep)
##
for(r in 1:rep){
## generate new MC_data conditionally on X_cond
MC_data <- myDataGenerator(n    = n,
beta = beta_true,
X    = X_cond)
lm_obj            <- lm(Y ~ X_2 + X_3, data = MC_data)
## save the p-value
CI <- confint(lm_obj, parm="X_2", level=1-signif_level)
confint_m[,r] <- CI
}
round(length(inside_CI[inside_CI == FALSE])/rep, 2)
##
inside_CI  <- confint_m[1,] <= beta_true_2 &
beta_true_2 <= confint_m[2,]
## True mean and variance of the true normal distribution
## of beta_hat_2|X:
# true mean
beta_true_2     <- beta_true[2]
set.seed(123)
signif_level <-  0.05
rep          <- 5000 # MC replications
confint_m    <- matrix(NA, nrow=2, ncol=rep)
##
for(r in 1:rep){
## generate new MC_data conditionally on X_cond
MC_data <- myDataGenerator(n    = n,
beta = beta_true,
X    = X_cond)
lm_obj            <- lm(Y ~ X_2 + X_3, data = MC_data)
## save the p-value
CI <- confint(lm_obj, parm="X_2", level=1-signif_level)
confint_m[,r] <- CI
}
##
inside_CI  <- confint_m[1,] <= beta_true_2 &
beta_true_2 <= confint_m[2,]
## CI-lower, CI-upper, beta_true_2 inside?
head(cbind(t(confint_m), inside_CI))
round(length(inside_CI[inside_CI == FALSE])/rep, 2)
round(length(inside_CI[inside_CI == FALSE])/rep, 3)
args(myDataGenerator)
for(r in 1:rep){
## generate new MC_data conditionally on X_cond
MC_data <- myDataGenerator(n    = n,
beta = beta_true,
X    = NULL)#X_cond)
lm_obj            <- lm(Y ~ X_2 + X_3, data = MC_data)
## save the p-value
CI <- confint(lm_obj, parm="X_2", level=1-signif_level)
confint_m[,r] <- CI
}
##
inside_CI  <- confint_m[1,] <= beta_true_2 &
beta_true_2 <= confint_m[2,]
## CI-lower, CI-upper, beta_true_2 inside?
head(cbind(t(confint_m), inside_CI))
round(length(inside_CI[inside_CI == FALSE])/rep, 3)
round(length(inside_CI[inside_CI == FALSE])/rep, 4)
set.seed(123)
signif_level <-  0.05
rep          <- 5000 # MC replications
confint_m    <- matrix(NA, nrow=2, ncol=rep)
##
for(r in 1:rep){
## generate new MC_data conditionally on X_cond
MC_data <- myDataGenerator(n    = n,
beta = beta_true,
X    = NULL)#X_cond)
lm_obj            <- lm(Y ~ X_2 + X_3, data = MC_data)
## save the p-value
CI <- confint(lm_obj, parm="X_2", level=1-signif_level)
confint_m[,r] <- CI
}
##
inside_CI  <- confint_m[1,] <= beta_true_2 &
beta_true_2 <= confint_m[2,]
## CI-lower, CI-upper, beta_true_2 inside?
head(cbind(t(confint_m), inside_CI))
round(length(inside_CI[inside_CI == FALSE])/rep, 4)
n
set.seed(123)
signif_level <-  0.05
rep          <- 5000 # MC replications
confint_m    <- matrix(NA, nrow=2, ncol=rep)
##
for(r in 1:rep){
## generate new MC_data conditionally on X_cond
MC_data <- myDataGenerator(n    = n,
beta = beta_true,
#X    = NULL)
X = X_cond)
lm_obj            <- lm(Y ~ X_2 + X_3, data = MC_data)
## save the p-value
CI <- confint(lm_obj, parm="X_2", level=1-signif_level)
confint_m[,r] <- CI
}
##
inside_CI  <- confint_m[1,] <= beta_true_2 &
beta_true_2 <= confint_m[2,]
## CI-lower, CI-upper, beta_true_2 inside?
head(cbind(t(confint_m), inside_CI))
round(length(inside_CI[inside_CI == FALSE])/rep, 4)
n <- 5
sigma <- 5
## Let's generate a data set from our data generating process
mydata  <- myDataGenerator(n = n, beta=beta_true)
X_cond  <- cbind(mydata$X_1, mydata$X_2, mydata$X_3)
set.seed(321)
rep             <- 5000 # MC replications
F_test_pvalues  <- rep(NA, times=rep)
##
for(r in 1:rep){
## generate new MC_data conditionally on X_cond
MC_data <- myDataGenerator(n    = n,
beta = beta_true,
X    = X_cond)
lm_obj            <- lm(Y ~ X_2 + X_3, data = MC_data)
## save p-values of all rep-many tests
F_test_pvalues[r] <- linearHypothesis(lm_obj,
c("X_2=4","X_3=4"))$`Pr(>F)`[2]
}
## ---------------------------
suppressMessages(library("car")) # for linearHyothesis()
set.seed(321)
rep             <- 5000 # MC replications
F_test_pvalues  <- rep(NA, times=rep)
##
for(r in 1:rep){
## generate new MC_data conditionally on X_cond
MC_data <- myDataGenerator(n    = n,
beta = beta_true,
X    = X_cond)
lm_obj            <- lm(Y ~ X_2 + X_3, data = MC_data)
## save p-values of all rep-many tests
F_test_pvalues[r] <- linearHypothesis(lm_obj,
c("X_2=4","X_3=4"))$`Pr(>F)`[2]
}
##
signif_level <-  0.05
rejections   <- F_test_pvalues[F_test_pvalues < signif_level]
length(rejections)/rep
rep             <- 5000 # MC replications
F_test_pvalues  <- rep(NA, times=rep)
##
for(r in 1:rep){
## generate new MC_data conditionally on X_cond
MC_data <- myDataGenerator(n    = n,
beta = beta_true,
X    = X_cond)
lm_obj            <- lm(Y ~ X_2 + X_3, data = MC_data)
## save the p-value
p <- linearHypothesis(lm_obj,
c("X_2=3", "X_3=4"))$`Pr(>F)`[2]
F_test_pvalues[r] <- p
}
##
signif_level <-  0.05
rejections   <- F_test_pvalues[F_test_pvalues < signif_level]
round(length(rejections)/rep, 3)
##
signif_level <-  0.01
rejections   <- F_test_pvalues[F_test_pvalues < signif_level]
round(length(rejections)/rep, 3)
for(r in 1:rep){
## generate new MC_data conditionally on X_cond
MC_data <- myDataGenerator(n    = n,
beta = beta_true,
X    = NULL)
#                               X    = X_cond)
lm_obj            <- lm(Y ~ X_2 + X_3, data = MC_data)
## save the p-value
p <- linearHypothesis(lm_obj,
c("X_2=3", "X_3=4"))$`Pr(>F)`[2]
F_test_pvalues[r] <- p
}
signif_level <-  0.05
rejections   <- F_test_pvalues[F_test_pvalues < signif_level]
round(length(rejections)/rep, 3)
signif_level <-  0.01
rejections   <- F_test_pvalues[F_test_pvalues < signif_level]
round(length(rejections)/rep, 3)
n
library("quarto")
quarto_render("document.qmd") # defaults to html
quarto_render("index.qmd") # defaults to html
quarto_render("index.qmd", output_format = "pdf")
quarto_render("index.qmd") # defaults to html
