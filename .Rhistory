estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rchisq(n = n, df = 5)
## compute the sample mean and safe it
estimates_mat[b,] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
Var_n_seq
n_seq
## True parameter value
theta         <- 5
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- seq(from =5, to = 100, by = 5)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rchisq(n = n, df = 5)
## compute the sample mean and safe it
estimates_mat[b,] <- mean(X_sample)
}
}
colMeans(estimates_mat)
theta         <- 5
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- seq(from = 5, to = 100, by = 5)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rchisq(n = n, df = 5)
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
Bias_n_seq
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){(x - mean(x))^2})
MSE_n_seq
par(mfrow=c(3,1))
plot(x = n_seq, y = Bias_n_seq, type = "b")
plot(x = n_seq, y = Var_n_seq, type = "b")
plot(x = n_seq, y = MSE_n_seq, type = "b")
length(MSE_n_seq)
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean(x - theta)^2})
par(mfrow=c(3,1))
plot(x = n_seq, y = Bias_n_seq, type = "b")
plot(x = n_seq, y = Var_n_seq, type = "b")
plot(x = n_seq, y = MSE_n_seq, type = "b")
## True parameter value
theta         <- 5
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- seq(from = 5, to = 100, by = 5)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rchisq(n = n, df = 5)
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean(x - theta)^2})
par(mfrow=c(3,1))
plot(x = n_seq, y = Bias_n_seq, type = "b")
plot(x = n_seq, y = Var_n_seq, type = "b")
plot(x = n_seq, y = MSE_n_seq, type = "b")
## True parameter value
theta         <- 5
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- seq(from = 5, to = 20, by = 5)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rchisq(n = n, df = 5)
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean(x - theta)^2})
par(mfrow=c(3,1))
plot(x = n_seq, y = Bias_n_seq, type = "b")
plot(x = n_seq, y = Var_n_seq, type = "b")
plot(x = n_seq, y = MSE_n_seq, type = "b")
## True parameter value
theta         <- 10
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- c(5, 15, 25)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rnorm(n = n, mean = theta, sd = sqrt(5))
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean(x - theta)^2})
par(mfrow=c(3,1))
plot(x = n_seq, y = Bias_n_seq, type = "b")
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b")
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b")
abline(h = 0)
par(mfrow=c(3,1))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-sqrt(5), sqrt(5)))
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
set.seed(1234)
## True parameter value
theta         <- 10
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- c(5, 15, 25)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rnorm(n = n, mean = theta, sd = sqrt(5))
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean(x - theta)^2})
par(mfrow=c(3,1))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-sqrt(5), sqrt(5)))
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean((x - theta)^2)})
cbind(MSE_n_seq, Var_n_seq)
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean((x - theta)^2)})
par(mfrow=c(3,1))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-sqrt(5), sqrt(5)))
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-sqrt(5), sqrt(5)))
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.5, 0.5))
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.1, 0.1))
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 5))
abline(h = 0)
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.2, 0.2))
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 1.5))
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 1.5))
abline(h = 0)
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.2, 0.2),
main="Bias", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 1.5),
main="Variance", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 1.5),
main="MSE", xlab = "n", ylab = "")
abline(h = 0)
set.seed(223)
## True parameter value
theta         <- 10
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- c(5, 15, 25)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rnorm(n = n, mean = theta, sd = sqrt(5))
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean((x - theta)^2)})
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.2, 0.2),
main="Bias", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 1.5),
main="Variance", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 1.5),
main="MSE", xlab = "n", ylab = "")
abline(h = 0)
set.seed(22)
## True parameter value
theta         <- 10
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- c(5, 15, 25)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rnorm(n = n, mean = theta, sd = sqrt(5))
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean((x - theta)^2)})
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.2, 0.2),
main="Bias", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 1.5),
main="Variance", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 1.5),
main="MSE", xlab = "n", ylab = "")
abline(h = 0)
set.seed(111)
## True parameter value
theta         <- 10
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- c(5, 15, 25)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rnorm(n = n, mean = theta, sd = sqrt(5))
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean((x - theta)^2)})
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.2, 0.2),
main="Bias", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 1.5),
main="Variance", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 1.5),
main="MSE", xlab = "n", ylab = "")
abline(h = 0)
set.seed(1111)
## True parameter value
theta         <- 10
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- c(5, 15, 25)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rnorm(n = n, mean = theta, sd = sqrt(5))
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean((x - theta)^2)})
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.2, 0.2),
main="Bias", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 1.5),
main="Variance", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 1.5),
main="MSE", xlab = "n", ylab = "")
abline(h = 0)
seed <- 0
seed <- seed +1
set.seed(seed)
## True parameter value
theta         <- 10
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- c(5, 15, 25)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rnorm(n = n, mean = theta, sd = sqrt(5))
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean((x - theta)^2)})
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.2, 0.2),
main="Bias", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 1.5),
main="Variance", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 1.5),
main="MSE", xlab = "n", ylab = "")
abline(h = 0)
seed <- seed +1
set.seed(seed)
## True parameter value
theta         <- 10
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- c(5, 15, 25)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rnorm(n = n, mean = theta, sd = sqrt(5))
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean((x - theta)^2)})
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.2, 0.2),
main="Bias", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 1.5),
main="Variance", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 1.5),
main="MSE", xlab = "n", ylab = "")
abline(h = 0)
seed <- seed +1
set.seed(seed)
## True parameter value
theta         <- 10
## Number of Monte Carlo repetitions:
B             <- 10000
## Sequence of different sample sizes:
n_seq         <- c(5, 15, 25)
## Container for the generated estimates:
estimates_mat <- matrix(NA, nrow = B, ncol = length(n_seq))
for(j in 1:length(n_seq)){
## select the sample size
n <- n_seq[j]
for(b in 1:B){
## generate realization of the random sample
X_sample <- rnorm(n = n, mean = theta, sd = sqrt(5))
## compute the sample mean and safe it
estimates_mat[b,j] <- mean(X_sample)
}
}
## Bias of the sample mean for different sample sizes n
Bias_n_seq <- colMeans(estimates_mat) - theta
## Variance of the sample mean for different sample sizes n
Var_n_seq  <- apply(estimates_mat, 2, var)
## Mean squared error of the sample mean for different sample sizes n
MSE_n_seq  <- apply(estimates_mat, 2, function(x){mean((x - theta)^2)})
par(mfrow=c(1,3))
plot(x = n_seq, y = Bias_n_seq, type = "b", ylim = c(-0.2, 0.2),
main="Bias", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = Var_n_seq, type = "b", ylim = c(0, 1.5),
main="Variance", xlab = "n", ylab = "")
abline(h = 0)
plot(x = n_seq, y = MSE_n_seq, type = "b", ylim = c(0, 1.5),
main="MSE", xlab = "n", ylab = "")
abline(h = 0)
seed
?tibble
suppressPackageStartupMessages(library("tidyverse"))
?tibble
hist(estimates_mat[,1], main="n=5")
hist(estimates_mat[,2], main="n=15")
hist(estimates_mat[,3], main="n=25")
getwd()
